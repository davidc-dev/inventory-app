# frontend/Dockerfile

# ---- Build Stage ----
# Use an official Node.js LTS (Long Term Support) version as a parent image for building the application
FROM node:20-alpine AS build

# Set the working directory in the container for the build stage
WORKDIR /app

# Copy package.json and package-lock.json (or yarn.lock)
# This step is separated to leverage Docker's layer caching.
# If these files haven't changed, Docker can reuse the cached layer from a previous build
# where dependencies were installed, speeding up subsequent builds.
COPY package*.json ./

# Install project dependencies
# If you're using npm:
RUN npm install
# If you're using yarn:
# RUN yarn install

# Copy the rest of the frontend application source code into the container
COPY . .

# Build the React application for production
# This command typically creates a 'build' or 'dist' folder with static assets.
RUN npm run build
# If you're using yarn:
# RUN yarn build

# ---- Serve Stage ----
# Use a lightweight web server to serve the static files from the build stage.
# Nginx is a popular choice, but for simplicity, we can use 'serve'.
# 'serve' is a simple static file serving and directory listing utility.
FROM node:20-alpine

WORKDIR /app

# Install 'serve' globally. 'serve' is a simple static server.
RUN npm install -g serve

# Copy the build output from the 'build' stage to the current stage
# The static files (HTML, CSS, JS) generated by 'npm run build'
# are typically located in a 'build' or 'dist' directory.
# Adjust the source path if your build process outputs to a different directory (e.g., 'dist').
COPY --from=build /app/build ./build
# If your build output is in 'dist':
# COPY --from=build /app/dist ./dist

# Expose port 3000 (or the port your app will run on)
# This informs Docker that the container listens on this port at runtime.
# It doesn't actually publish the port; that's done in docker-compose.yml or with 'docker run -p'.
EXPOSE 3000

# Command to serve the static files when the container launches.
# 'serve -s build' tells 'serve' to serve the contents of the 'build' directory.
# The '-l 3000' flag tells serve to listen on port 3000.
# The '-n' flag disables clipboard copying of the URL, which is useful in CI environments.
CMD ["serve", "-s", "build", "-l", "3000", "-n"]
# If your build output is in 'dist':
# CMD ["serve", "-s", "dist", "-l", "3000", "-n"]
